
Task 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004328  08004328  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004328  08004328  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004328  08004328  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004330  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000064  08004394  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001214  08004394  00006214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd4c  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a00  00000000  00000000  00015dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000187e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9c  00000000  00000000  00019700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019093  00000000  00000000  0001a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb36  00000000  00000000  0003332f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e80  00000000  00000000  00042e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3ce5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  000d3d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d7e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004234 	.word	0x08004234

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004234 	.word	0x08004234

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000080 	.word	0x20000080
 800017c:	20000120 	.word	0x20000120

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09e      	sub	sp, #120	@ 0x78
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa91 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f86f 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8a9 	bl	80002e4 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 8000192:	2300      	movs	r3, #0
 8000194:	673b      	str	r3, [r7, #112]	@ 0x70
 8000196:	2300      	movs	r3, #0
 8000198:	677b      	str	r3, [r7, #116]	@ 0x74
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 800019a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fc68 	bl	8001a76 <osSemaphoreCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a27      	ldr	r2, [pc, #156]	@ (8000248 <main+0xc8>)
 80001aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001ac:	4b27      	ldr	r3, [pc, #156]	@ (800024c <main+0xcc>)
 80001ae:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fbf5 	bl	80019b6 <osThreadCreate>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a20      	ldr	r2, [pc, #128]	@ (8000250 <main+0xd0>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of GreendLedFlash */
  osThreadDef(GreendLedFlash, GreenLedTask, osPriorityNormal, 0, 128);
 80001d2:	4b20      	ldr	r3, [pc, #128]	@ (8000254 <main+0xd4>)
 80001d4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80001d8:	461d      	mov	r5, r3
 80001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreendLedFlashHandle = osThreadCreate(osThread(GreendLedFlash), NULL);
 80001e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 fbe2 	bl	80019b6 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a18      	ldr	r2, [pc, #96]	@ (8000258 <main+0xd8>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of RedLedFlash */
  osThreadDef(RedLedFlash, RedLedTask, osPriorityNormal, 0, 128);
 80001f8:	4b18      	ldr	r3, [pc, #96]	@ (800025c <main+0xdc>)
 80001fa:	f107 041c 	add.w	r4, r7, #28
 80001fe:	461d      	mov	r5, r3
 8000200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLedFlashHandle = osThreadCreate(osThread(RedLedFlash), NULL);
 800020c:	f107 031c 	add.w	r3, r7, #28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fbcf 	bl	80019b6 <osThreadCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a11      	ldr	r2, [pc, #68]	@ (8000260 <main+0xe0>)
 800021c:	6013      	str	r3, [r2, #0]

  /* definition and creation of OrangeLedFlash */
  osThreadDef(OrangeLedFlash, OrangeLedTask, osPriorityAboveNormal, 0, 128);
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <main+0xe4>)
 8000220:	463c      	mov	r4, r7
 8000222:	461d      	mov	r5, r3
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeLedFlashHandle = osThreadCreate(osThread(OrangeLedFlash), NULL);
 8000230:	463b      	mov	r3, r7
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fbbe 	bl	80019b6 <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <main+0xe8>)
 800023e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000240:	f001 fbb2 	bl	80019a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	bf00      	nop
 8000246:	e7fd      	b.n	8000244 <main+0xc4>
 8000248:	20000330 	.word	0x20000330
 800024c:	08004258 	.word	0x08004258
 8000250:	20000320 	.word	0x20000320
 8000254:	08004284 	.word	0x08004284
 8000258:	20000324 	.word	0x20000324
 800025c:	080042ac 	.word	0x080042ac
 8000260:	20000328 	.word	0x20000328
 8000264:	080042d8 	.word	0x080042d8
 8000268:	2000032c 	.word	0x2000032c

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fef4 	bl	8004068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fcee 	bl	8000c84 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ae:	f000 f8f1 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 ff5c 	bl	8001188 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f8dd 	bl	8000494 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	@ 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_GPIO_Init+0x5c>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <MX_GPIO_Init+0x5c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_GPIO_Init+0x5c>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GreenLED_Pin|BlueLED_Pin|RedLED_Pin|OrangeLED_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	210f      	movs	r1, #15
 8000314:	480b      	ldr	r0, [pc, #44]	@ (8000344 <MX_GPIO_Init+0x60>)
 8000316:	f000 fc83 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GreenLED_Pin BlueLED_Pin RedLED_Pin OrangeLED_Pin */
  GPIO_InitStruct.Pin = GreenLED_Pin|BlueLED_Pin|RedLED_Pin|OrangeLED_Pin;
 800031a:	230f      	movs	r3, #15
 800031c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	@ (8000344 <MX_GPIO_Init+0x60>)
 8000332:	f000 faf1 	bl	8000918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40010800 	.word	0x40010800

08000348 <accessSharedData>:

/* USER CODE BEGIN 4 */
void accessSharedData(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  if (startFlag == 1)
 800034c:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <accessSharedData+0x3c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	2b01      	cmp	r3, #1
 8000354:	d103      	bne.n	800035e <accessSharedData+0x16>
  {
    startFlag = 0;
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <accessSharedData+0x3c>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	e004      	b.n	8000368 <accessSharedData+0x20>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	4809      	ldr	r0, [pc, #36]	@ (8000388 <accessSharedData+0x40>)
 8000364:	f000 fc5c 	bl	8000c20 <HAL_GPIO_WritePin>
  }
  HAL_Delay(1000);
 8000368:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036c:	f000 f9d0 	bl	8000710 <HAL_Delay>
  startFlag = 1;
 8000370:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <accessSharedData+0x3c>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2102      	movs	r1, #2
 800037a:	4803      	ldr	r0, [pc, #12]	@ (8000388 <accessSharedData+0x40>)
 800037c:	f000 fc50 	bl	8000c20 <HAL_GPIO_WritePin>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000000 	.word	0x20000000
 8000388:	40010800 	.word	0x40010800

0800038c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f001 fb5a 	bl	8001a4e <osDelay>
 800039a:	e7fb      	b.n	8000394 <StartDefaultTask+0x8>

0800039c <GreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLedTask */
void GreenLedTask(void const * argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLedTask */
  /* Infinite loop */
	for(;;)
			  {
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	480f      	ldr	r0, [pc, #60]	@ (80003e8 <GreenLedTask+0x4c>)
 80003aa:	f000 fc39 	bl	8000c20 <HAL_GPIO_WritePin>
			    osSemaphoreWait(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <GreenLedTask+0x50>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0f      	ldr	r2, [pc, #60]	@ (80003f0 <GreenLedTask+0x54>)
 80003b4:	8812      	ldrh	r2, [r2, #0]
 80003b6:	b292      	uxth	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fb8e 	bl	8001adc <osSemaphoreWait>
			    accessSharedData();
 80003c0:	f7ff ffc2 	bl	8000348 <accessSharedData>

			    osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80003c4:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <GreenLedTask+0x50>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fbd5 	bl	8001b78 <osSemaphoreRelease>
			    osDelay(200);
 80003ce:	20c8      	movs	r0, #200	@ 0xc8
 80003d0:	f001 fb3d 	bl	8001a4e <osDelay>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2101      	movs	r1, #1
 80003d8:	4803      	ldr	r0, [pc, #12]	@ (80003e8 <GreenLedTask+0x4c>)
 80003da:	f000 fc21 	bl	8000c20 <HAL_GPIO_WritePin>

			    osDelay(200);
 80003de:	20c8      	movs	r0, #200	@ 0xc8
 80003e0:	f001 fb35 	bl	8001a4e <osDelay>
			    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003e4:	bf00      	nop
 80003e6:	e7dd      	b.n	80003a4 <GreenLedTask+0x8>
 80003e8:	40010800 	.word	0x40010800
 80003ec:	20000330 	.word	0x20000330
 80003f0:	20000002 	.word	0x20000002

080003f4 <RedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLedTask */
void RedLedTask(void const * argument)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLedTask */
  /* Infinite loop */
	for(;;)
			    {
			        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	4810      	ldr	r0, [pc, #64]	@ (8000444 <RedLedTask+0x50>)
 8000402:	f000 fc0d 	bl	8000c20 <HAL_GPIO_WritePin>
			        osSemaphoreWait(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 8000406:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <RedLedTask+0x54>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a10      	ldr	r2, [pc, #64]	@ (800044c <RedLedTask+0x58>)
 800040c:	8812      	ldrh	r2, [r2, #0]
 800040e:	b292      	uxth	r2, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fb62 	bl	8001adc <osSemaphoreWait>
			        accessSharedData();
 8000418:	f7ff ff96 	bl	8000348 <accessSharedData>

			        osSemaphoreRelease	(CriticalResourceSemaphoreHandle);
 800041c:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <RedLedTask+0x54>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f001 fba9 	bl	8001b78 <osSemaphoreRelease>
			        osDelay(550);
 8000426:	f240 2026 	movw	r0, #550	@ 0x226
 800042a:	f001 fb10 	bl	8001a4e <osDelay>
			        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2104      	movs	r1, #4
 8000432:	4804      	ldr	r0, [pc, #16]	@ (8000444 <RedLedTask+0x50>)
 8000434:	f000 fbf4 	bl	8000c20 <HAL_GPIO_WritePin>
			        osDelay(550);
 8000438:	f240 2026 	movw	r0, #550	@ 0x226
 800043c:	f001 fb07 	bl	8001a4e <osDelay>
			        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000440:	bf00      	nop
 8000442:	e7db      	b.n	80003fc <RedLedTask+0x8>
 8000444:	40010800 	.word	0x40010800
 8000448:	20000330 	.word	0x20000330
 800044c:	20000002 	.word	0x20000002

08000450 <OrangeLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeLedTask */
void OrangeLedTask(void const * argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeLedTask */
  /* Infinite loop */
	for(;;)
		  {
		    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000458:	2108      	movs	r1, #8
 800045a:	4804      	ldr	r0, [pc, #16]	@ (800046c <OrangeLedTask+0x1c>)
 800045c:	f000 fbf8 	bl	8000c50 <HAL_GPIO_TogglePin>
		    osDelay(50);
 8000460:	2032      	movs	r0, #50	@ 0x32
 8000462:	f001 faf4 	bl	8001a4e <osDelay>
		    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000466:	bf00      	nop
 8000468:	e7f6      	b.n	8000458 <OrangeLedTask+0x8>
 800046a:	bf00      	nop
 800046c:	40010800 	.word	0x40010800

08000470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a04      	ldr	r2, [pc, #16]	@ (8000490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d101      	bne.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000482:	f000 f929 	bl	80006d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40000800 	.word	0x40000800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <HAL_MspInit+0x68>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <HAL_MspInit+0x68>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <HAL_MspInit+0x68>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <HAL_MspInit+0x68>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a11      	ldr	r2, [pc, #68]	@ (8000508 <HAL_MspInit+0x68>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <HAL_MspInit+0x68>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	210f      	movs	r1, #15
 80004da:	f06f 0001 	mvn.w	r0, #1
 80004de:	f000 f9f0 	bl	80008c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <HAL_MspInit+0x6c>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	4a04      	ldr	r2, [pc, #16]	@ (800050c <HAL_MspInit+0x6c>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000
 800050c:	40010000 	.word	0x40010000

08000510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	@ 0x38
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000526:	4b34      	ldr	r3, [pc, #208]	@ (80005f8 <HAL_InitTick+0xe8>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a33      	ldr	r2, [pc, #204]	@ (80005f8 <HAL_InitTick+0xe8>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b31      	ldr	r3, [pc, #196]	@ (80005f8 <HAL_InitTick+0xe8>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800053e:	f107 0210 	add.w	r2, r7, #16
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4611      	mov	r1, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f000 ff79 	bl	8001440 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800054e:	6a3b      	ldr	r3, [r7, #32]
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000558:	f000 ff5e 	bl	8001418 <HAL_RCC_GetPCLK1Freq>
 800055c:	6378      	str	r0, [r7, #52]	@ 0x34
 800055e:	e004      	b.n	800056a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000560:	f000 ff5a 	bl	8001418 <HAL_RCC_GetPCLK1Freq>
 8000564:	4603      	mov	r3, r0
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800056a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800056c:	4a23      	ldr	r2, [pc, #140]	@ (80005fc <HAL_InitTick+0xec>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	0c9b      	lsrs	r3, r3, #18
 8000574:	3b01      	subs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000578:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <HAL_InitTick+0xf0>)
 800057a:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <HAL_InitTick+0xf4>)
 800057c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800057e:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <HAL_InitTick+0xf0>)
 8000580:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000584:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000586:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <HAL_InitTick+0xf0>)
 8000588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800058a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800058c:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <HAL_InitTick+0xf0>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <HAL_InitTick+0xf0>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000598:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <HAL_InitTick+0xf0>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800059e:	4818      	ldr	r0, [pc, #96]	@ (8000600 <HAL_InitTick+0xf0>)
 80005a0:	f000 ff9c 	bl	80014dc <HAL_TIM_Base_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d11b      	bne.n	80005ea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005b2:	4813      	ldr	r0, [pc, #76]	@ (8000600 <HAL_InitTick+0xf0>)
 80005b4:	f000 ffea 	bl	800158c <HAL_TIM_Base_Start_IT>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d111      	bne.n	80005ea <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005c6:	201e      	movs	r0, #30
 80005c8:	f000 f997 	bl	80008fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b0f      	cmp	r3, #15
 80005d0:	d808      	bhi.n	80005e4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005d2:	2200      	movs	r2, #0
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	201e      	movs	r0, #30
 80005d8:	f000 f973 	bl	80008c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <HAL_InitTick+0xf8>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	e002      	b.n	80005ea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3738      	adds	r7, #56	@ 0x38
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	431bde83 	.word	0x431bde83
 8000600:	20000334 	.word	0x20000334
 8000604:	40000800 	.word	0x40000800
 8000608:	20000008 	.word	0x20000008

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <NMI_Handler+0x4>

08000614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <MemManage_Handler+0x4>

08000624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <UsageFault_Handler+0x4>

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <TIM4_IRQHandler+0x10>)
 8000646:	f000 fff3 	bl	8001630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000334 	.word	0x20000334

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	@ (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	@ (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	@ (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f003 fd4b 	bl	8004124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fd77 	bl	8000180 <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800069c:	08004330 	.word	0x08004330
  ldr r2, =_sbss
 80006a0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006a4:	20001214 	.word	0x20001214

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f8f5 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f7ff ff24 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff feea 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <HAL_IncTick+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_IncTick+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a03      	ldr	r2, [pc, #12]	@ (80006f8 <HAL_IncTick+0x20>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	2000000c 	.word	0x2000000c
 80006f8:	2000037c 	.word	0x2000037c

080006fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	@ (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	2000037c 	.word	0x2000037c

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000728:	d005      	beq.n	8000736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_Delay+0x44>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000736:	bf00      	nop
 8000738:	f7ff ffe0 	bl	80006fc <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8f7      	bhi.n	8000738 <HAL_Delay+0x28>
  {
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000000c 	.word	0x2000000c

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	@ (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4906      	ldr	r1, [pc, #24]	@ (80007f0 <__NVIC_EnableIRQ+0x34>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	@ 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff4f 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff64 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ffb2 	bl	8000848 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff81 	bl	80007f4 <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff57 	bl	80007bc <__NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b08b      	sub	sp, #44	@ 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092a:	e169      	b.n	8000c00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800092c:	2201      	movs	r2, #1
 800092e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 8158 	bne.w	8000bfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bb8 <HAL_GPIO_Init+0x2a0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d05e      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000954:	4a98      	ldr	r2, [pc, #608]	@ (8000bb8 <HAL_GPIO_Init+0x2a0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d875      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800095a:	4a98      	ldr	r2, [pc, #608]	@ (8000bbc <HAL_GPIO_Init+0x2a4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d058      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000960:	4a96      	ldr	r2, [pc, #600]	@ (8000bbc <HAL_GPIO_Init+0x2a4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d86f      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000966:	4a96      	ldr	r2, [pc, #600]	@ (8000bc0 <HAL_GPIO_Init+0x2a8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d052      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 800096c:	4a94      	ldr	r2, [pc, #592]	@ (8000bc0 <HAL_GPIO_Init+0x2a8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d869      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000972:	4a94      	ldr	r2, [pc, #592]	@ (8000bc4 <HAL_GPIO_Init+0x2ac>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d04c      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000978:	4a92      	ldr	r2, [pc, #584]	@ (8000bc4 <HAL_GPIO_Init+0x2ac>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d863      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800097e:	4a92      	ldr	r2, [pc, #584]	@ (8000bc8 <HAL_GPIO_Init+0x2b0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d046      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000984:	4a90      	ldr	r2, [pc, #576]	@ (8000bc8 <HAL_GPIO_Init+0x2b0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d85d      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800098a:	2b12      	cmp	r3, #18
 800098c:	d82a      	bhi.n	80009e4 <HAL_GPIO_Init+0xcc>
 800098e:	2b12      	cmp	r3, #18
 8000990:	d859      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000992:	a201      	add	r2, pc, #4	@ (adr r2, 8000998 <HAL_GPIO_Init+0x80>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	08000a13 	.word	0x08000a13
 800099c:	080009ed 	.word	0x080009ed
 80009a0:	080009ff 	.word	0x080009ff
 80009a4:	08000a41 	.word	0x08000a41
 80009a8:	08000a47 	.word	0x08000a47
 80009ac:	08000a47 	.word	0x08000a47
 80009b0:	08000a47 	.word	0x08000a47
 80009b4:	08000a47 	.word	0x08000a47
 80009b8:	08000a47 	.word	0x08000a47
 80009bc:	08000a47 	.word	0x08000a47
 80009c0:	08000a47 	.word	0x08000a47
 80009c4:	08000a47 	.word	0x08000a47
 80009c8:	08000a47 	.word	0x08000a47
 80009cc:	08000a47 	.word	0x08000a47
 80009d0:	08000a47 	.word	0x08000a47
 80009d4:	08000a47 	.word	0x08000a47
 80009d8:	08000a47 	.word	0x08000a47
 80009dc:	080009f5 	.word	0x080009f5
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	4a79      	ldr	r2, [pc, #484]	@ (8000bcc <HAL_GPIO_Init+0x2b4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ea:	e02c      	b.n	8000a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	623b      	str	r3, [r7, #32]
          break;
 80009f2:	e029      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	3304      	adds	r3, #4
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	e024      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	3308      	adds	r3, #8
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e01f      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	330c      	adds	r3, #12
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e01a      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e013      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	611a      	str	r2, [r3, #16]
          break;
 8000a32:	e009      	b.n	8000a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	615a      	str	r2, [r3, #20]
          break;
 8000a3e:	e003      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          break;
 8000a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d801      	bhi.n	8000a52 <HAL_GPIO_Init+0x13a>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	e001      	b.n	8000a56 <HAL_GPIO_Init+0x13e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3304      	adds	r3, #4
 8000a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	@ 0xff
 8000a5c:	d802      	bhi.n	8000a64 <HAL_GPIO_Init+0x14c>
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x152>
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	3b08      	subs	r3, #8
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	210f      	movs	r1, #15
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	6a39      	ldr	r1, [r7, #32]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	431a      	orrs	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80b1 	beq.w	8000bfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a98:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ab0:	4a48      	ldr	r2, [pc, #288]	@ (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a40      	ldr	r2, [pc, #256]	@ (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d013      	beq.n	8000b04 <HAL_GPIO_Init+0x1ec>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3f      	ldr	r2, [pc, #252]	@ (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d00d      	beq.n	8000b00 <HAL_GPIO_Init+0x1e8>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <HAL_GPIO_Init+0x2c8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d007      	beq.n	8000afc <HAL_GPIO_Init+0x1e4>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3d      	ldr	r2, [pc, #244]	@ (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d101      	bne.n	8000af8 <HAL_GPIO_Init+0x1e0>
 8000af4:	2303      	movs	r3, #3
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000af8:	2304      	movs	r3, #4
 8000afa:	e004      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000afc:	2302      	movs	r3, #2
 8000afe:	e002      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000b04:	2300      	movs	r3, #0
 8000b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b08:	f002 0203 	and.w	r2, r2, #3
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	4093      	lsls	r3, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b16:	492f      	ldr	r1, [pc, #188]	@ (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	492c      	ldr	r1, [pc, #176]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4928      	ldr	r1, [pc, #160]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	4922      	ldr	r1, [pc, #136]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	491e      	ldr	r1, [pc, #120]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	4918      	ldr	r1, [pc, #96]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4914      	ldr	r1, [pc, #80]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d021      	beq.n	8000bec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	490e      	ldr	r1, [pc, #56]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
 8000bb4:	e021      	b.n	8000bfa <HAL_GPIO_Init+0x2e2>
 8000bb6:	bf00      	nop
 8000bb8:	10320000 	.word	0x10320000
 8000bbc:	10310000 	.word	0x10310000
 8000bc0:	10220000 	.word	0x10220000
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	10120000 	.word	0x10120000
 8000bcc:	10110000 	.word	0x10110000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40011400 	.word	0x40011400
 8000be8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_GPIO_Init+0x304>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4909      	ldr	r1, [pc, #36]	@ (8000c1c <HAL_GPIO_Init+0x304>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f47f ae8e 	bne.w	800092c <HAL_GPIO_Init+0x14>
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	372c      	adds	r7, #44	@ 0x2c
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c3c:	e003      	b.n	8000c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	041a      	lsls	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	611a      	str	r2, [r3, #16]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43d9      	mvns	r1, r3
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	400b      	ands	r3, r1
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e272      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 8087 	beq.w	8000db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca4:	4b92      	ldr	r3, [pc, #584]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 030c 	and.w	r3, r3, #12
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d00c      	beq.n	8000cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 030c 	and.w	r3, r3, #12
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d112      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x5e>
 8000cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cca:	4b89      	ldr	r3, [pc, #548]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d06c      	beq.n	8000db0 <HAL_RCC_OscConfig+0x12c>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d168      	bne.n	8000db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e24c      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cea:	d106      	bne.n	8000cfa <HAL_RCC_OscConfig+0x76>
 8000cec:	4b80      	ldr	r3, [pc, #512]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e02e      	b.n	8000d58 <HAL_RCC_OscConfig+0xd4>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x98>
 8000d02:	4b7b      	ldr	r3, [pc, #492]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a7a      	ldr	r2, [pc, #488]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b78      	ldr	r3, [pc, #480]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a77      	ldr	r2, [pc, #476]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e01d      	b.n	8000d58 <HAL_RCC_OscConfig+0xd4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0xbc>
 8000d26:	4b72      	ldr	r3, [pc, #456]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a71      	ldr	r2, [pc, #452]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b6f      	ldr	r3, [pc, #444]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a6e      	ldr	r2, [pc, #440]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e00b      	b.n	8000d58 <HAL_RCC_OscConfig+0xd4>
 8000d40:	4b6b      	ldr	r3, [pc, #428]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a6a      	ldr	r2, [pc, #424]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b68      	ldr	r3, [pc, #416]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a67      	ldr	r2, [pc, #412]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d013      	beq.n	8000d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fccc 	bl	80006fc <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d68:	f7ff fcc8 	bl	80006fc <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b64      	cmp	r3, #100	@ 0x64
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e200      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0xe4>
 8000d86:	e014      	b.n	8000db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcb8 	bl	80006fc <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcb4 	bl	80006fc <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	@ 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e1ec      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da2:	4b53      	ldr	r3, [pc, #332]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x10c>
 8000dae:	e000      	b.n	8000db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d063      	beq.n	8000e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00b      	beq.n	8000de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dca:	4b49      	ldr	r3, [pc, #292]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 030c 	and.w	r3, r3, #12
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d11c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x18c>
 8000dd6:	4b46      	ldr	r3, [pc, #280]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d116      	bne.n	8000e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <HAL_RCC_OscConfig+0x176>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d001      	beq.n	8000dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e1c0      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4939      	ldr	r1, [pc, #228]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0e:	e03a      	b.n	8000e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d020      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e18:	4b36      	ldr	r3, [pc, #216]	@ (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1e:	f7ff fc6d 	bl	80006fc <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e26:	f7ff fc69 	bl	80006fc <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e1a1      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e44:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4927      	ldr	r1, [pc, #156]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]
 8000e58:	e015      	b.n	8000e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fc4c 	bl	80006fc <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc48 	bl	80006fc <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e180      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d03a      	beq.n	8000f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d019      	beq.n	8000ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_RCC_OscConfig+0x274>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fc2c 	bl	80006fc <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc28 	bl	80006fc <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e160      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f000 faea 	bl	80014a0 <RCC_Delay>
 8000ecc:	e01c      	b.n	8000f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_RCC_OscConfig+0x274>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fc12 	bl	80006fc <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eda:	e00f      	b.n	8000efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fc0e 	bl	80006fc <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d908      	bls.n	8000efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e146      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	42420000 	.word	0x42420000
 8000ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	4b92      	ldr	r3, [pc, #584]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1e9      	bne.n	8000edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a6 	beq.w	8001062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10d      	bne.n	8000f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b88      	ldr	r3, [pc, #544]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a87      	ldr	r2, [pc, #540]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b85      	ldr	r3, [pc, #532]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f42:	4b82      	ldr	r3, [pc, #520]	@ (800114c <HAL_RCC_OscConfig+0x4c8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d118      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800114c <HAL_RCC_OscConfig+0x4c8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a7e      	ldr	r2, [pc, #504]	@ (800114c <HAL_RCC_OscConfig+0x4c8>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fbcf 	bl	80006fc <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f62:	f7ff fbcb 	bl	80006fc <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	@ 0x64
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e103      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	4b75      	ldr	r3, [pc, #468]	@ (800114c <HAL_RCC_OscConfig+0x4c8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x312>
 8000f88:	4b6f      	ldr	r3, [pc, #444]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	e02d      	b.n	8000ff2 <HAL_RCC_OscConfig+0x36e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x334>
 8000f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a69      	ldr	r2, [pc, #420]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6213      	str	r3, [r2, #32]
 8000faa:	4b67      	ldr	r3, [pc, #412]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a66      	ldr	r2, [pc, #408]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	e01c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x36e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x356>
 8000fc0:	4b61      	ldr	r3, [pc, #388]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a60      	ldr	r2, [pc, #384]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6213      	str	r3, [r2, #32]
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6213      	str	r3, [r2, #32]
 8000fd8:	e00b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x36e>
 8000fda:	4b5b      	ldr	r3, [pc, #364]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a5a      	ldr	r2, [pc, #360]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4a57      	ldr	r2, [pc, #348]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fb7f 	bl	80006fc <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fb7b 	bl	80006fc <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e0b1      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001018:	4b4b      	ldr	r3, [pc, #300]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ee      	beq.n	8001002 <HAL_RCC_OscConfig+0x37e>
 8001024:	e014      	b.n	8001050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb69 	bl	80006fc <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102c:	e00a      	b.n	8001044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102e:	f7ff fb65 	bl	80006fc <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e09b      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001044:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1ee      	bne.n	800102e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d105      	bne.n	8001062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001056:	4b3c      	ldr	r3, [pc, #240]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a3b      	ldr	r2, [pc, #236]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b08      	cmp	r3, #8
 8001076:	d061      	beq.n	800113c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d146      	bne.n	800110e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001080:	4b33      	ldr	r3, [pc, #204]	@ (8001150 <HAL_RCC_OscConfig+0x4cc>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fb39 	bl	80006fc <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fb35 	bl	80006fc <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e06d      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a0:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b4:	d108      	bne.n	80010c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4921      	ldr	r1, [pc, #132]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a19      	ldr	r1, [r3, #32]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	430b      	orrs	r3, r1
 80010da:	491b      	ldr	r1, [pc, #108]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_RCC_OscConfig+0x4cc>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fb09 	bl	80006fc <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fb05 	bl	80006fc <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e03d      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x46a>
 800110c:	e035      	b.n	800117a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_RCC_OscConfig+0x4cc>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff faf2 	bl	80006fc <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff faee 	bl	80006fc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e026      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x498>
 800113a:	e01e      	b.n	800117a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e019      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
 8001148:	40021000 	.word	0x40021000
 800114c:	40007000 	.word	0x40007000
 8001150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <HAL_RCC_OscConfig+0x500>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	429a      	cmp	r2, r3
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001172:	429a      	cmp	r2, r3
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e0d0      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	4b6a      	ldr	r3, [pc, #424]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d910      	bls.n	80011cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	4b67      	ldr	r3, [pc, #412]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 0207 	bic.w	r2, r3, #7
 80011b2:	4965      	ldr	r1, [pc, #404]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ba:	4b63      	ldr	r3, [pc, #396]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0b8      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e4:	4b59      	ldr	r3, [pc, #356]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a58      	ldr	r2, [pc, #352]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011fc:	4b53      	ldr	r3, [pc, #332]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a52      	ldr	r2, [pc, #328]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001208:	4b50      	ldr	r3, [pc, #320]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	494d      	ldr	r1, [pc, #308]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d040      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b47      	ldr	r3, [pc, #284]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d115      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e07f      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d107      	bne.n	8001256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001246:	4b41      	ldr	r3, [pc, #260]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e073      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	4b3d      	ldr	r3, [pc, #244]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e06b      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001266:	4b39      	ldr	r3, [pc, #228]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4936      	ldr	r1, [pc, #216]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001278:	f7ff fa40 	bl	80006fc <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127e:	e00a      	b.n	8001296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f7ff fa3c 	bl	80006fc <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e053      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 020c 	and.w	r2, r3, #12
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d1eb      	bne.n	8001280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d210      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	4922      	ldr	r1, [pc, #136]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e032      	b.n	800133e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4916      	ldr	r1, [pc, #88]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	490e      	ldr	r1, [pc, #56]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001316:	f000 f821 	bl	800135c <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	490a      	ldr	r1, [pc, #40]	@ (8001350 <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	5ccb      	ldrb	r3, [r1, r3]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <HAL_RCC_ClockConfig+0x1cc>)
 8001330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_RCC_ClockConfig+0x1d0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8ea 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000
 800134c:	40021000 	.word	0x40021000
 8001350:	080042fc 	.word	0x080042fc
 8001354:	20000004 	.word	0x20000004
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d002      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x30>
 8001386:	2b08      	cmp	r3, #8
 8001388:	d003      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0x36>
 800138a:	e027      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	e027      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	0c5b      	lsrs	r3, r3, #17
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e004      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	613b      	str	r3, [r7, #16]
      break;
 80013da:	e002      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013e2:	693b      	ldr	r3, [r7, #16]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	08004314 	.word	0x08004314
 80013fc:	08004324 	.word	0x08004324
 8001400:	003d0900 	.word	0x003d0900

08001404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001408:	4b02      	ldr	r3, [pc, #8]	@ (8001414 <HAL_RCC_GetHCLKFreq+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000004 	.word	0x20000004

08001418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800141c:	f7ff fff2 	bl	8001404 <HAL_RCC_GetHCLKFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	4903      	ldr	r1, [pc, #12]	@ (800143c <HAL_RCC_GetPCLK1Freq+0x24>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40021000 	.word	0x40021000
 800143c:	0800430c 	.word	0x0800430c

08001440 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	220f      	movs	r2, #15
 800144e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_RCC_GetClockConfig+0x58>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800145c:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_RCC_GetClockConfig+0x58>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_RCC_GetClockConfig+0x58>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_RCC_GetClockConfig+0x58>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_RCC_GetClockConfig+0x5c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0207 	and.w	r2, r3, #7
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40022000 	.word	0x40022000

080014a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <RCC_Delay+0x34>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <RCC_Delay+0x38>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0a5b      	lsrs	r3, r3, #9
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014bc:	bf00      	nop
  }
  while (Delay --);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	60fa      	str	r2, [r7, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f9      	bne.n	80014bc <RCC_Delay+0x1c>
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000004 	.word	0x20000004
 80014d8:	10624dd3 	.word	0x10624dd3

080014dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e041      	b.n	8001572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f839 	bl	800157a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3304      	adds	r3, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f000 f99c 	bl	8001858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d001      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e03a      	b.n	800161a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_TIM_Base_Start_IT+0x98>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00e      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x58>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ce:	d009      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x58>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <HAL_TIM_Base_Start_IT+0x9c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x58>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a13      	ldr	r2, [pc, #76]	@ (800162c <HAL_TIM_Base_Start_IT+0xa0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d111      	bne.n	8001608 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d010      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001606:	e007      	b.n	8001618 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40012c00 	.word	0x40012c00
 8001628:	40000400 	.word	0x40000400
 800162c:	40000800 	.word	0x40000800

08001630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d020      	beq.n	8001694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01b      	beq.n	8001694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0202 	mvn.w	r2, #2
 8001664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8d1 	bl	8001822 <HAL_TIM_IC_CaptureCallback>
 8001680:	e005      	b.n	800168e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f8c4 	bl	8001810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f8d3 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d020      	beq.n	80016e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f06f 0204 	mvn.w	r2, #4
 80016b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8ab 	bl	8001822 <HAL_TIM_IC_CaptureCallback>
 80016cc:	e005      	b.n	80016da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f89e 	bl	8001810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8ad 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d020      	beq.n	800172c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0208 	mvn.w	r2, #8
 80016fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2204      	movs	r2, #4
 8001702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f885 	bl	8001822 <HAL_TIM_IC_CaptureCallback>
 8001718:	e005      	b.n	8001726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f878 	bl	8001810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f887 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d020      	beq.n	8001778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0210 	mvn.w	r2, #16
 8001748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2208      	movs	r2, #8
 800174e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f85f 	bl	8001822 <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f852 	bl	8001810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f861 	bl	8001834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0201 	mvn.w	r2, #1
 8001794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fe6a 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8c3 	bl	8001946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00c      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f831 	bl	8001846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d007      	beq.n	8001808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0220 	mvn.w	r2, #32
 8001800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f896 	bl	8001934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <TIM_Base_SetConfig+0xd0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00b      	beq.n	8001888 <TIM_Base_SetConfig+0x30>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001876:	d007      	beq.n	8001888 <TIM_Base_SetConfig+0x30>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a2c      	ldr	r2, [pc, #176]	@ (800192c <TIM_Base_SetConfig+0xd4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d003      	beq.n	8001888 <TIM_Base_SetConfig+0x30>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <TIM_Base_SetConfig+0xd8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d108      	bne.n	800189a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800188e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a22      	ldr	r2, [pc, #136]	@ (8001928 <TIM_Base_SetConfig+0xd0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00b      	beq.n	80018ba <TIM_Base_SetConfig+0x62>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a8:	d007      	beq.n	80018ba <TIM_Base_SetConfig+0x62>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a1f      	ldr	r2, [pc, #124]	@ (800192c <TIM_Base_SetConfig+0xd4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d003      	beq.n	80018ba <TIM_Base_SetConfig+0x62>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <TIM_Base_SetConfig+0xd8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d108      	bne.n	80018cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <TIM_Base_SetConfig+0xd0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d103      	bne.n	8001900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f023 0201 	bic.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
  }
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40012c00 	.word	0x40012c00
 800192c:	40000400 	.word	0x40000400
 8001930:	40000800 	.word	0x40000800

08001934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	2b84      	cmp	r3, #132	@ 0x84
 800196c:	d005      	beq.n	800197a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800196e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	3303      	adds	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800198c:	f3ef 8305 	mrs	r3, IPSR
 8001990:	607b      	str	r3, [r7, #4]
  return(result);
 8001992:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019ac:	f001 f93c 	bl	8002c28 <vTaskStartScheduler>
  
  return osOK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b8:	b089      	sub	sp, #36	@ 0x24
 80019ba:	af04      	add	r7, sp, #16
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <osThreadCreate+0x54>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685c      	ldr	r4, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691e      	ldr	r6, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffb8 	bl	8001958 <makeFreeRtosPriority>
 80019e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019f2:	9202      	str	r2, [sp, #8]
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	9100      	str	r1, [sp, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4632      	mov	r2, r6
 80019fc:	4629      	mov	r1, r5
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 ff2d 	bl	800285e <xTaskCreateStatic>
 8001a04:	4603      	mov	r3, r0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e01c      	b.n	8001a44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685c      	ldr	r4, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a16:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff9a 	bl	8001958 <makeFreeRtosPriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	4632      	mov	r2, r6
 8001a32:	4629      	mov	r1, r5
 8001a34:	4620      	mov	r0, r4
 8001a36:	f000 ff72 	bl	800291e <xTaskCreate>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a44:	68fb      	ldr	r3, [r7, #12]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <osDelay+0x16>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e000      	b.n	8001a66 <osDelay+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 f8a8 	bl	8002bbc <vTaskDelay>
  
  return osOK;
 8001a6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af02      	add	r7, sp, #8
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10a      	bne.n	8001aa4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 f9bc 	bl	8001e18 <xQueueGenericCreateStatic>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	e016      	b.n	8001ad2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e014      	b.n	8001ad2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d110      	bne.n	8001ad0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001aae:	2203      	movs	r2, #3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 fa2d 	bl	8001f12 <xQueueGenericCreate>
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <osSemaphoreCreate+0x56>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fa7e 	bl	8001fc8 <xQueueGenericSend>
      return sema;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	e000      	b.n	8001ad2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001ad0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	e03a      	b.n	8001b6a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001afe:	d103      	bne.n	8001b08 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e009      	b.n	8001b1c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <osSemaphoreWait+0x40>
      ticks = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001b1c:	f7ff ff33 	bl	8001986 <inHandlerMode>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fcec 	bl	800250c <xQueueReceiveFromISR>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <osSemaphoreWait+0x62>
      return osErrorOS;
 8001b3a:	23ff      	movs	r3, #255	@ 0xff
 8001b3c:	e015      	b.n	8001b6a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d011      	beq.n	8001b68 <osSemaphoreWait+0x8c>
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <osSemaphoreWait+0x98>)
 8001b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	e008      	b.n	8001b68 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fbc7 	bl	80022ec <xQueueSemaphoreTake>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001b64:	23ff      	movs	r3, #255	@ 0xff
 8001b66:	e000      	b.n	8001b6a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001b88:	f7ff fefd 	bl	8001986 <inHandlerMode>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb17 	bl	80021cc <xQueueGiveFromISR>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001ba4:	23ff      	movs	r3, #255	@ 0xff
 8001ba6:	e017      	b.n	8001bd8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d013      	beq.n	8001bd6 <osSemaphoreRelease+0x5e>
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <osSemaphoreRelease+0x68>)
 8001bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	e00a      	b.n	8001bd6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f9fe 	bl	8001fc8 <xQueueGenericSend>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001bd2:	23ff      	movs	r3, #255	@ 0xff
 8001bd4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	e000ed04 	.word	0xe000ed04

08001be4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 0208 	add.w	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f103 0208 	add.w	r2, r3, #8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0208 	add.w	r2, r3, #8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c96:	d103      	bne.n	8001ca0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	e00c      	b.n	8001cba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e002      	b.n	8001cae <vListInsert+0x2e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d2f6      	bcs.n	8001ca8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6892      	ldr	r2, [r2, #8]
 8001d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6852      	ldr	r2, [r2, #4]
 8001d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d103      	bne.n	8001d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
	...

08001d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d70:	f001 fe8c 	bl	8003a8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	441a      	add	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	3b01      	subs	r3, #1
 8001da2:	68f9      	ldr	r1, [r7, #12]
 8001da4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	441a      	add	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	22ff      	movs	r2, #255	@ 0xff
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	22ff      	movs	r2, #255	@ 0xff
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d114      	bne.n	8001df0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01a      	beq.n	8001e04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 f980 	bl	80030d8 <xTaskRemoveFromEventList>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <xQueueGenericReset+0xd0>)
 8001de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	e009      	b.n	8001e04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3310      	adds	r3, #16
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fef5 	bl	8001be4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3324      	adds	r3, #36	@ 0x24
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fef0 	bl	8001be4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e04:	f001 fe72 	bl	8003aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e30:	f383 8811 	msr	BASEPRI, r3
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10b      	bne.n	8001e62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <xQueueGenericCreateStatic+0x56>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <xQueueGenericCreateStatic+0x5a>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <xQueueGenericCreateStatic+0x5c>
 8001e72:	2300      	movs	r3, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	f3bf 8f4f 	dsb	sy
 8001e88:	623b      	str	r3, [r7, #32]
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <xQueueGenericCreateStatic+0x84>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <xQueueGenericCreateStatic+0x88>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <xQueueGenericCreateStatic+0x8a>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eaa:	f383 8811 	msr	BASEPRI, r3
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	61fb      	str	r3, [r7, #28]
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ebe:	2348      	movs	r3, #72	@ 0x48
 8001ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b48      	cmp	r3, #72	@ 0x48
 8001ec6:	d00b      	beq.n	8001ee0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	61bb      	str	r3, [r7, #24]
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ee0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ef4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f840 	bl	8001f88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b08a      	sub	sp, #40	@ 0x28
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10b      	bne.n	8001f3e <xQueueGenericCreate+0x2c>
	__asm volatile
 8001f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	613b      	str	r3, [r7, #16]
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	e7fd      	b.n	8001f3a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3348      	adds	r3, #72	@ 0x48
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 fe9f 	bl	8003c90 <pvPortMalloc>
 8001f52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d011      	beq.n	8001f7e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3348      	adds	r3, #72	@ 0x48
 8001f62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f805 	bl	8001f88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e002      	b.n	8001faa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	69b8      	ldr	r0, [r7, #24]
 8001fba:	f7ff fec3 	bl	8001d44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <xQueueGenericSend+0x34>
	__asm volatile
 8001fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <xQueueGenericSend+0x42>
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <xQueueGenericSend+0x46>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <xQueueGenericSend+0x48>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <xQueueGenericSend+0x64>
	__asm volatile
 8002014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d103      	bne.n	800203a <xQueueGenericSend+0x72>
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <xQueueGenericSend+0x76>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <xQueueGenericSend+0x78>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <xQueueGenericSend+0x94>
	__asm volatile
 8002044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	623b      	str	r3, [r7, #32]
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800205c:	f001 fa02 	bl	8003464 <xTaskGetSchedulerState>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <xQueueGenericSend+0xa4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <xQueueGenericSend+0xa8>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <xQueueGenericSend+0xaa>
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10b      	bne.n	800208e <xQueueGenericSend+0xc6>
	__asm volatile
 8002076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	61fb      	str	r3, [r7, #28]
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	e7fd      	b.n	800208a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800208e:	f001 fcfd 	bl	8003a8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <xQueueGenericSend+0xdc>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d129      	bne.n	80020f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020aa:	f000 fac8 	bl	800263e <prvCopyDataToQueue>
 80020ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ba:	3324      	adds	r3, #36	@ 0x24
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 f80b 	bl	80030d8 <xTaskRemoveFromEventList>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020c8:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <xQueueGenericSend+0x200>)
 80020ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
 80020d8:	e00a      	b.n	80020f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <xQueueGenericSend+0x200>)
 80020e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020f0:	f001 fcfc 	bl	8003aec <vPortExitCritical>
				return pdPASS;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e063      	b.n	80021c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020fe:	f001 fcf5 	bl	8003aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002102:	2300      	movs	r3, #0
 8002104:	e05c      	b.n	80021c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4618      	mov	r0, r3
 8002112:	f001 f845 	bl	80031a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002116:	2301      	movs	r3, #1
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800211a:	f001 fce7 	bl	8003aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800211e:	f000 fded 	bl	8002cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002122:	f001 fcb3 	bl	8003a8c <vPortEnterCritical>
 8002126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800212c:	b25b      	sxtb	r3, r3
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002132:	d103      	bne.n	800213c <xQueueGenericSend+0x174>
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002142:	b25b      	sxtb	r3, r3
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002148:	d103      	bne.n	8002152 <xQueueGenericSend+0x18a>
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002152:	f001 fccb 	bl	8003aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002156:	1d3a      	adds	r2, r7, #4
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f001 f834 	bl	80031cc <xTaskCheckForTimeOut>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d124      	bne.n	80021b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800216a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800216c:	f000 fb5f 	bl	800282e <prvIsQueueFull>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d018      	beq.n	80021a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	3310      	adds	r3, #16
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f000 ff84 	bl	800308c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002186:	f000 faea 	bl	800275e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800218a:	f000 fdc5 	bl	8002d18 <xTaskResumeAll>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f af7c 	bne.w	800208e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <xQueueGenericSend+0x200>)
 8002198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	e772      	b.n	800208e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021aa:	f000 fad8 	bl	800275e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021ae:	f000 fdb3 	bl	8002d18 <xTaskResumeAll>
 80021b2:	e76c      	b.n	800208e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021b6:	f000 fad2 	bl	800275e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021ba:	f000 fdad 	bl	8002d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3738      	adds	r7, #56	@ 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	e000ed04 	.word	0xe000ed04

080021cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	@ 0x38
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80021da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	623b      	str	r3, [r7, #32]
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	61fb      	str	r3, [r7, #28]
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <xQueueGiveFromISR+0x5c>
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <xQueueGiveFromISR+0x60>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <xQueueGiveFromISR+0x62>
 800222c:	2300      	movs	r3, #0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	61bb      	str	r3, [r7, #24]
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800224a:	f001 fce1 	bl	8003c10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800224e:	f3ef 8211 	mrs	r2, BASEPRI
 8002252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	617a      	str	r2, [r7, #20]
 8002264:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002266:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002276:	429a      	cmp	r2, r3
 8002278:	d22b      	bcs.n	80022d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800228c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002294:	d112      	bne.n	80022bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	3324      	adds	r3, #36	@ 0x24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 ff18 	bl	80030d8 <xTaskRemoveFromEventList>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00e      	beq.n	80022cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e007      	b.n	80022cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022c0:	3301      	adds	r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	b25a      	sxtb	r2, r3
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80022cc:	2301      	movs	r3, #1
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d0:	e001      	b.n	80022d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3738      	adds	r7, #56	@ 0x38
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	@ 0x38
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	623b      	str	r3, [r7, #32]
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	61fb      	str	r3, [r7, #28]
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002340:	f001 f890 	bl	8003464 <xTaskGetSchedulerState>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <xQueueSemaphoreTake+0x64>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <xQueueSemaphoreTake+0x68>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <xQueueSemaphoreTake+0x6a>
 8002354:	2300      	movs	r3, #0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800235a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	61bb      	str	r3, [r7, #24]
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	e7fd      	b.n	800236e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002372:	f001 fb8b 	bl	8003a8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	d024      	beq.n	80023cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800238a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002392:	f001 fa13 	bl	80037bc <pvTaskIncrementMutexHeldCount>
 8002396:	4602      	mov	r2, r0
 8002398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00f      	beq.n	80023c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	3310      	adds	r3, #16
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fe95 	bl	80030d8 <xTaskRemoveFromEventList>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023b4:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <xQueueSemaphoreTake+0x21c>)
 80023b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023c4:	f001 fb92 	bl	8003aec <vPortExitCritical>
				return pdPASS;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e098      	b.n	80024fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d112      	bne.n	80023f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	617b      	str	r3, [r7, #20]
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80023f0:	f001 fb7c 	bl	8003aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e082      	b.n	80024fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fecc 	bl	80031a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002408:	2301      	movs	r3, #1
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800240c:	f001 fb6e 	bl	8003aec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002410:	f000 fc74 	bl	8002cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002414:	f001 fb3a 	bl	8003a8c <vPortEnterCritical>
 8002418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800241e:	b25b      	sxtb	r3, r3
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002424:	d103      	bne.n	800242e <xQueueSemaphoreTake+0x142>
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002430:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002434:	b25b      	sxtb	r3, r3
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800243a:	d103      	bne.n	8002444 <xQueueSemaphoreTake+0x158>
 800243c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002444:	f001 fb52 	bl	8003aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002448:	463a      	mov	r2, r7
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f000 febb 	bl	80031cc <xTaskCheckForTimeOut>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d132      	bne.n	80024c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800245c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800245e:	f000 f9d0 	bl	8002802 <prvIsQueueEmpty>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d026      	beq.n	80024b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002470:	f001 fb0c 	bl	8003a8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f811 	bl	80034a0 <xTaskPriorityInherit>
 800247e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002480:	f001 fb34 	bl	8003aec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002486:	3324      	adds	r3, #36	@ 0x24
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fdfd 	bl	800308c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002492:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002494:	f000 f963 	bl	800275e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002498:	f000 fc3e 	bl	8002d18 <xTaskResumeAll>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af67 	bne.w	8002372 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <xQueueSemaphoreTake+0x21c>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	e75d      	b.n	8002372 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80024b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024b8:	f000 f951 	bl	800275e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024bc:	f000 fc2c 	bl	8002d18 <xTaskResumeAll>
 80024c0:	e757      	b.n	8002372 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80024c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024c4:	f000 f94b 	bl	800275e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024c8:	f000 fc26 	bl	8002d18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024ce:	f000 f998 	bl	8002802 <prvIsQueueEmpty>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f43f af4c 	beq.w	8002372 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80024e0:	f001 fad4 	bl	8003a8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80024e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e6:	f000 f893 	bl	8002610 <prvGetDisinheritPriorityAfterTimeout>
 80024ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80024ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 f8d2 	bl	800369c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80024f8:	f001 faf8 	bl	8003aec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3738      	adds	r7, #56	@ 0x38
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000ed04 	.word	0xe000ed04

0800250c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	@ 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10b      	bne.n	800253a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	623b      	str	r3, [r7, #32]
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <xQueueReceiveFromISR+0x3c>
 8002540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <xQueueReceiveFromISR+0x40>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <xQueueReceiveFromISR+0x42>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10b      	bne.n	800256a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	61fb      	str	r3, [r7, #28]
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	e7fd      	b.n	8002566 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800256a:	f001 fb51 	bl	8003c10 <vPortValidateInterruptPriority>
	__asm volatile
 800256e:	f3ef 8211 	mrs	r2, BASEPRI
 8002572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	61ba      	str	r2, [r7, #24]
 8002584:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002586:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02f      	beq.n	80025f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800259c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025a4:	f000 f8b5 	bl	8002712 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80025b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025b8:	d112      	bne.n	80025e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	3310      	adds	r3, #16
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fd86 	bl	80030d8 <xTaskRemoveFromEventList>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00e      	beq.n	80025f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e007      	b.n	80025f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80025e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80025f0:	2301      	movs	r3, #1
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f4:	e001      	b.n	80025fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f383 8811 	msr	BASEPRI, r3
}
 8002604:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002608:	4618      	mov	r0, r3
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e001      	b.n	8002632 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002632:	68fb      	ldr	r3, [r7, #12]
	}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002652:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d14d      	bne.n	8002700 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 ff8f 	bl	800358c <xTaskPriorityDisinherit>
 800266e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	e043      	b.n	8002700 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d119      	bne.n	80026b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6858      	ldr	r0, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	461a      	mov	r2, r3
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	f001 fd71 	bl	8004170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	441a      	add	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d32b      	bcc.n	8002700 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	e026      	b.n	8002700 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68d8      	ldr	r0, [r3, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	461a      	mov	r2, r3
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	f001 fd57 	bl	8004170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	425b      	negs	r3, r3
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d207      	bcs.n	80026ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	425b      	negs	r3, r3
 80026e8:	441a      	add	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d105      	bne.n	8002700 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002708:	697b      	ldr	r3, [r7, #20]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d303      	bcc.n	8002746 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	461a      	mov	r2, r3
 8002750:	6838      	ldr	r0, [r7, #0]
 8002752:	f001 fd0d 	bl	8004170 <memcpy>
	}
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002766:	f001 f991 	bl	8003a8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002770:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002772:	e011      	b.n	8002798 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d012      	beq.n	80027a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3324      	adds	r3, #36	@ 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fca9 	bl	80030d8 <xTaskRemoveFromEventList>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800278c:	f000 fd82 	bl	8003294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3b01      	subs	r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	dce9      	bgt.n	8002774 <prvUnlockQueue+0x16>
 80027a0:	e000      	b.n	80027a4 <prvUnlockQueue+0x46>
					break;
 80027a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027ac:	f001 f99e 	bl	8003aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027b0:	f001 f96c 	bl	8003a8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027bc:	e011      	b.n	80027e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3310      	adds	r3, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fc84 	bl	80030d8 <xTaskRemoveFromEventList>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027d6:	f000 fd5d 	bl	8003294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	3b01      	subs	r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	dce9      	bgt.n	80027be <prvUnlockQueue+0x60>
 80027ea:	e000      	b.n	80027ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	22ff      	movs	r2, #255	@ 0xff
 80027f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80027f6:	f001 f979 	bl	8003aec <vPortExitCritical>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800280a:	f001 f93f 	bl	8003a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002816:	2301      	movs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e001      	b.n	8002820 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002820:	f001 f964 	bl	8003aec <vPortExitCritical>

	return xReturn;
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002836:	f001 f929 	bl	8003a8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002842:	429a      	cmp	r2, r3
 8002844:	d102      	bne.n	800284c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002846:	2301      	movs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e001      	b.n	8002850 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002850:	f001 f94c 	bl	8003aec <vPortExitCritical>

	return xReturn;
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800285e:	b580      	push	{r7, lr}
 8002860:	b08e      	sub	sp, #56	@ 0x38
 8002862:	af04      	add	r7, sp, #16
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800286c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <xTaskCreateStatic+0x2c>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	623b      	str	r3, [r7, #32]
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	e7fd      	b.n	8002886 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800288a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	61fb      	str	r3, [r7, #28]
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028a8:	23a0      	movs	r3, #160	@ 0xa0
 80028aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80028b0:	d00b      	beq.n	80028ca <xTaskCreateStatic+0x6c>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	61bb      	str	r3, [r7, #24]
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	e7fd      	b.n	80028c6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01e      	beq.n	8002910 <xTaskCreateStatic+0xb2>
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028ea:	2300      	movs	r3, #0
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	9302      	str	r3, [sp, #8]
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f850 	bl	80029a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800290a:	f000 f8ed 	bl	8002ae8 <prvAddNewTaskToReadyList>
 800290e:	e001      	b.n	8002914 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002914:	697b      	ldr	r3, [r7, #20]
	}
 8002916:	4618      	mov	r0, r3
 8002918:	3728      	adds	r7, #40	@ 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800291e:	b580      	push	{r7, lr}
 8002920:	b08c      	sub	sp, #48	@ 0x30
 8002922:	af04      	add	r7, sp, #16
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4618      	mov	r0, r3
 8002934:	f001 f9ac 	bl	8003c90 <pvPortMalloc>
 8002938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002940:	20a0      	movs	r0, #160	@ 0xa0
 8002942:	f001 f9a5 	bl	8003c90 <pvPortMalloc>
 8002946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
 8002954:	e005      	b.n	8002962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f001 fa68 	bl	8003e2c <vPortFree>
 800295c:	e001      	b.n	8002962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	2300      	movs	r3, #0
 8002974:	9303      	str	r3, [sp, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f80e 	bl	80029a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800298c:	69f8      	ldr	r0, [r7, #28]
 800298e:	f000 f8ab 	bl	8002ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002992:	2301      	movs	r3, #1
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e002      	b.n	800299e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800299c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800299e:	69bb      	ldr	r3, [r7, #24]
	}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029c0:	3b01      	subs	r3, #1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	617b      	str	r3, [r7, #20]
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	e7fd      	b.n	80029ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01f      	beq.n	8002a38 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	e012      	b.n	8002a24 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	7819      	ldrb	r1, [r3, #0]
 8002a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3334      	adds	r3, #52	@ 0x34
 8002a0e:	460a      	mov	r2, r1
 8002a10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d9e9      	bls.n	80029fe <prvInitialiseNewTask+0x56>
 8002a2a:	e000      	b.n	8002a2e <prvInitialiseNewTask+0x86>
			{
				break;
 8002a2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a36:	e003      	b.n	8002a40 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d901      	bls.n	8002a4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a46:	2306      	movs	r3, #6
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	2200      	movs	r2, #0
 8002a5a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f8de 	bl	8001c22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	3318      	adds	r3, #24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f8d9 	bl	8001c22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	f1c3 0207 	rsb	r2, r3, #7
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	334c      	adds	r3, #76	@ 0x4c
 8002a9a:	224c      	movs	r2, #76	@ 0x4c
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fae2 	bl	8004068 <memset>
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <prvInitialiseNewTask+0x134>)
 8002aa8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae0 <prvInitialiseNewTask+0x138>)
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae4 <prvInitialiseNewTask+0x13c>)
 8002ab4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	69b8      	ldr	r0, [r7, #24]
 8002abc:	f000 fef8 	bl	80038b0 <pxPortInitialiseStack>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200010d4 	.word	0x200010d4
 8002ae0:	2000113c 	.word	0x2000113c
 8002ae4:	200011a4 	.word	0x200011a4

08002ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002af0:	f000 ffcc 	bl	8003a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002af4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <prvAddNewTaskToReadyList+0xb8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a29      	ldr	r2, [pc, #164]	@ (8002ba0 <prvAddNewTaskToReadyList+0xb8>)
 8002afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002afe:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <prvAddNewTaskToReadyList+0xbc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b06:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <prvAddNewTaskToReadyList+0xbc>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <prvAddNewTaskToReadyList+0xb8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d110      	bne.n	8002b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b14:	f000 fbe2 	bl	80032dc <prvInitialiseTaskLists>
 8002b18:	e00d      	b.n	8002b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <prvAddNewTaskToReadyList+0xc0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <prvAddNewTaskToReadyList+0xbc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d802      	bhi.n	8002b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba4 <prvAddNewTaskToReadyList+0xbc>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <prvAddNewTaskToReadyList+0xc4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <prvAddNewTaskToReadyList+0xc4>)
 8002b3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	2201      	movs	r2, #1
 8002b46:	409a      	lsls	r2, r3
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <prvAddNewTaskToReadyList+0xc8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	4a18      	ldr	r2, [pc, #96]	@ (8002bb0 <prvAddNewTaskToReadyList+0xc8>)
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <prvAddNewTaskToReadyList+0xcc>)
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7ff f866 	bl	8001c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b6e:	f000 ffbd 	bl	8003aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <prvAddNewTaskToReadyList+0xc0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <prvAddNewTaskToReadyList+0xbc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <prvAddNewTaskToReadyList+0xd0>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000480 	.word	0x20000480
 8002ba4:	20000380 	.word	0x20000380
 8002ba8:	2000048c 	.word	0x2000048c
 8002bac:	2000049c 	.word	0x2000049c
 8002bb0:	20000488 	.word	0x20000488
 8002bb4:	20000384 	.word	0x20000384
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bce:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <vTaskDelay+0x64>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <vTaskDelay+0x32>
	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	60bb      	str	r3, [r7, #8]
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bee:	f000 f885 	bl	8002cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fdf5 	bl	80037e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002bfa:	f000 f88d 	bl	8002d18 <xTaskResumeAll>
 8002bfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <vTaskDelay+0x68>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200004a8 	.word	0x200004a8
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	@ 0x28
 8002c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c36:	463a      	mov	r2, r7
 8002c38:	1d39      	adds	r1, r7, #4
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fa86 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	9202      	str	r2, [sp, #8]
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	460a      	mov	r2, r1
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <vTaskStartScheduler+0xb4>)
 8002c58:	4821      	ldr	r0, [pc, #132]	@ (8002ce0 <vTaskStartScheduler+0xb8>)
 8002c5a:	f7ff fe00 	bl	800285e <xTaskCreateStatic>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4a20      	ldr	r2, [pc, #128]	@ (8002ce4 <vTaskStartScheduler+0xbc>)
 8002c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <vTaskStartScheduler+0xbc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	e001      	b.n	8002c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d11b      	bne.n	8002cb4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	613b      	str	r3, [r7, #16]
}
 8002c8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002c90:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <vTaskStartScheduler+0xc0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	334c      	adds	r3, #76	@ 0x4c
 8002c96:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <vTaskStartScheduler+0xc4>)
 8002c98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <vTaskStartScheduler+0xc8>)
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <vTaskStartScheduler+0xcc>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <vTaskStartScheduler+0xd0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cae:	f000 fe7b 	bl	80039a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cb2:	e00f      	b.n	8002cd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cba:	d10b      	bne.n	8002cd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60fb      	str	r3, [r7, #12]
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <vTaskStartScheduler+0xa8>
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	080042f4 	.word	0x080042f4
 8002ce0:	080032ad 	.word	0x080032ad
 8002ce4:	200004a4 	.word	0x200004a4
 8002ce8:	20000380 	.word	0x20000380
 8002cec:	20000014 	.word	0x20000014
 8002cf0:	200004a0 	.word	0x200004a0
 8002cf4:	2000048c 	.word	0x2000048c
 8002cf8:	20000484 	.word	0x20000484

08002cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <vTaskSuspendAll+0x18>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4a03      	ldr	r2, [pc, #12]	@ (8002d14 <vTaskSuspendAll+0x18>)
 8002d08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	200004a8 	.word	0x200004a8

08002d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d26:	4b42      	ldr	r3, [pc, #264]	@ (8002e30 <xTaskResumeAll+0x118>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <xTaskResumeAll+0x2e>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	603b      	str	r3, [r7, #0]
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d46:	f000 fea1 	bl	8003a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <xTaskResumeAll+0x118>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	4a37      	ldr	r2, [pc, #220]	@ (8002e30 <xTaskResumeAll+0x118>)
 8002d52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d54:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <xTaskResumeAll+0x118>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d161      	bne.n	8002e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d5c:	4b35      	ldr	r3, [pc, #212]	@ (8002e34 <xTaskResumeAll+0x11c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d05d      	beq.n	8002e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d64:	e02e      	b.n	8002dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <xTaskResumeAll+0x120>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3318      	adds	r3, #24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ffbc 	bl	8001cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe ffb7 	bl	8001cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e3c <xTaskResumeAll+0x124>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <xTaskResumeAll+0x124>)
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4a27      	ldr	r2, [pc, #156]	@ (8002e40 <xTaskResumeAll+0x128>)
 8002da2:	441a      	add	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f7fe ff45 	bl	8001c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <xTaskResumeAll+0x12c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002dbe:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <xTaskResumeAll+0x130>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <xTaskResumeAll+0x120>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1cc      	bne.n	8002d66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dd2:	f000 fb27 	bl	8003424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <xTaskResumeAll+0x134>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002de2:	f000 f837 	bl	8002e54 <xTaskIncrementTick>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002dec:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <xTaskResumeAll+0x130>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f1      	bne.n	8002de2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <xTaskResumeAll+0x134>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <xTaskResumeAll+0x130>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e10:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <xTaskResumeAll+0x138>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e20:	f000 fe64 	bl	8003aec <vPortExitCritical>

	return xAlreadyYielded;
 8002e24:	68bb      	ldr	r3, [r7, #8]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200004a8 	.word	0x200004a8
 8002e34:	20000480 	.word	0x20000480
 8002e38:	20000440 	.word	0x20000440
 8002e3c:	20000488 	.word	0x20000488
 8002e40:	20000384 	.word	0x20000384
 8002e44:	20000380 	.word	0x20000380
 8002e48:	20000494 	.word	0x20000494
 8002e4c:	20000490 	.word	0x20000490
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f9c <xTaskIncrementTick+0x148>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 808f 	bne.w	8002f86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e68:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <xTaskIncrementTick+0x14c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e70:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa0 <xTaskIncrementTick+0x14c>)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d121      	bne.n	8002ec0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e7c:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <xTaskIncrementTick+0x150>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	603b      	str	r3, [r7, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	e7fd      	b.n	8002e9a <xTaskIncrementTick+0x46>
 8002e9e:	4b41      	ldr	r3, [pc, #260]	@ (8002fa4 <xTaskIncrementTick+0x150>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	4b40      	ldr	r3, [pc, #256]	@ (8002fa8 <xTaskIncrementTick+0x154>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa4 <xTaskIncrementTick+0x150>)
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa8 <xTaskIncrementTick+0x154>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fac <xTaskIncrementTick+0x158>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002fac <xTaskIncrementTick+0x158>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	f000 fab2 	bl	8003424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <xTaskIncrementTick+0x15c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d348      	bcc.n	8002f5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eca:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <xTaskIncrementTick+0x150>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed4:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <xTaskIncrementTick+0x15c>)
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002eda:	601a      	str	r2, [r3, #0]
					break;
 8002edc:	e03e      	b.n	8002f5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <xTaskIncrementTick+0x150>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d203      	bcs.n	8002efe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <xTaskIncrementTick+0x15c>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002efc:	e02e      	b.n	8002f5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fef4 	bl	8001cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3318      	adds	r3, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe feeb 	bl	8001cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <xTaskIncrementTick+0x160>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <xTaskIncrementTick+0x160>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <xTaskIncrementTick+0x164>)
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7fe fe79 	bl	8001c3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <xTaskIncrementTick+0x168>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d3b9      	bcc.n	8002eca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5a:	e7b6      	b.n	8002eca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <xTaskIncrementTick+0x168>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f62:	4915      	ldr	r1, [pc, #84]	@ (8002fb8 <xTaskIncrementTick+0x164>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d901      	bls.n	8002f78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <xTaskIncrementTick+0x16c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e004      	b.n	8002f90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f86:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <xTaskIncrementTick+0x170>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <xTaskIncrementTick+0x170>)
 8002f8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f90:	697b      	ldr	r3, [r7, #20]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200004a8 	.word	0x200004a8
 8002fa0:	20000484 	.word	0x20000484
 8002fa4:	20000438 	.word	0x20000438
 8002fa8:	2000043c 	.word	0x2000043c
 8002fac:	20000498 	.word	0x20000498
 8002fb0:	200004a0 	.word	0x200004a0
 8002fb4:	20000488 	.word	0x20000488
 8002fb8:	20000384 	.word	0x20000384
 8002fbc:	20000380 	.word	0x20000380
 8002fc0:	20000494 	.word	0x20000494
 8002fc4:	20000490 	.word	0x20000490

08002fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <vTaskSwitchContext+0xac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <vTaskSwitchContext+0xb0>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fdc:	e045      	b.n	800306a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002fde:	4b26      	ldr	r3, [pc, #152]	@ (8003078 <vTaskSwitchContext+0xb0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <vTaskSwitchContext+0xb4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f1c3 031f 	rsb	r3, r3, #31
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	4921      	ldr	r1, [pc, #132]	@ (8003080 <vTaskSwitchContext+0xb8>)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <vTaskSwitchContext+0x5e>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	607b      	str	r3, [r7, #4]
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <vTaskSwitchContext+0x5a>
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4a13      	ldr	r2, [pc, #76]	@ (8003080 <vTaskSwitchContext+0xb8>)
 8003032:	4413      	add	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3308      	adds	r3, #8
 8003048:	429a      	cmp	r2, r3
 800304a:	d104      	bne.n	8003056 <vTaskSwitchContext+0x8e>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <vTaskSwitchContext+0xbc>)
 800305e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <vTaskSwitchContext+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	334c      	adds	r3, #76	@ 0x4c
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <vTaskSwitchContext+0xc0>)
 8003068:	6013      	str	r3, [r2, #0]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	200004a8 	.word	0x200004a8
 8003078:	20000494 	.word	0x20000494
 800307c:	20000488 	.word	0x20000488
 8003080:	20000384 	.word	0x20000384
 8003084:	20000380 	.word	0x20000380
 8003088:	20000014 	.word	0x20000014

0800308c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	60fb      	str	r3, [r7, #12]
}
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030b4:	4b07      	ldr	r3, [pc, #28]	@ (80030d4 <vTaskPlaceOnEventList+0x48>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3318      	adds	r3, #24
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7fe fddf 	bl	8001c80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030c2:	2101      	movs	r1, #1
 80030c4:	6838      	ldr	r0, [r7, #0]
 80030c6:	f000 fb8d 	bl	80037e4 <prvAddCurrentTaskToDelayedList>
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000380 	.word	0x20000380

080030d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60fb      	str	r3, [r7, #12]
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	e7fd      	b.n	8003102 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3318      	adds	r3, #24
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fdf0 	bl	8001cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003110:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <xTaskRemoveFromEventList+0xb0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11c      	bne.n	8003152 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	3304      	adds	r3, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fde7 	bl	8001cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <xTaskRemoveFromEventList+0xb4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	4a16      	ldr	r2, [pc, #88]	@ (800318c <xTaskRemoveFromEventList+0xb4>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a13      	ldr	r2, [pc, #76]	@ (8003190 <xTaskRemoveFromEventList+0xb8>)
 8003142:	441a      	add	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe fd75 	bl	8001c3a <vListInsertEnd>
 8003150:	e005      	b.n	800315e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3318      	adds	r3, #24
 8003156:	4619      	mov	r1, r3
 8003158:	480e      	ldr	r0, [pc, #56]	@ (8003194 <xTaskRemoveFromEventList+0xbc>)
 800315a:	f7fe fd6e 	bl	8001c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <xTaskRemoveFromEventList+0xc0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d905      	bls.n	8003178 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <xTaskRemoveFromEventList+0xc4>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e001      	b.n	800317c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800317c:	697b      	ldr	r3, [r7, #20]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200004a8 	.word	0x200004a8
 800318c:	20000488 	.word	0x20000488
 8003190:	20000384 	.word	0x20000384
 8003194:	20000440 	.word	0x20000440
 8003198:	20000380 	.word	0x20000380
 800319c:	20000494 	.word	0x20000494

080031a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <vTaskInternalSetTimeOutState+0x24>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <vTaskInternalSetTimeOutState+0x28>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	605a      	str	r2, [r3, #4]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000498 	.word	0x20000498
 80031c8:	20000484 	.word	0x20000484

080031cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	613b      	str	r3, [r7, #16]
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	60fb      	str	r3, [r7, #12]
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	e7fd      	b.n	800320e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003212:	f000 fc3b 	bl	8003a8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <xTaskCheckForTimeOut+0xc0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800322e:	d102      	bne.n	8003236 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e023      	b.n	800327e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <xTaskCheckForTimeOut+0xc4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d007      	beq.n	8003252 <xTaskCheckForTimeOut+0x86>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	e015      	b.n	800327e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	d20b      	bcs.n	8003274 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff99 	bl	80031a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	e004      	b.n	800327e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800327e:	f000 fc35 	bl	8003aec <vPortExitCritical>

	return xReturn;
 8003282:	69fb      	ldr	r3, [r7, #28]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000484 	.word	0x20000484
 8003290:	20000498 	.word	0x20000498

08003294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <vTaskMissedYield+0x14>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000494 	.word	0x20000494

080032ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032b4:	f000 f852 	bl	800335c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <prvIdleTask+0x28>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d9f9      	bls.n	80032b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032c0:	4b05      	ldr	r3, [pc, #20]	@ (80032d8 <prvIdleTask+0x2c>)
 80032c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032d0:	e7f0      	b.n	80032b4 <prvIdleTask+0x8>
 80032d2:	bf00      	nop
 80032d4:	20000384 	.word	0x20000384
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e00c      	b.n	8003302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4a12      	ldr	r2, [pc, #72]	@ (800333c <prvInitialiseTaskLists+0x60>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fc74 	bl	8001be4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3301      	adds	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d9ef      	bls.n	80032e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003308:	480d      	ldr	r0, [pc, #52]	@ (8003340 <prvInitialiseTaskLists+0x64>)
 800330a:	f7fe fc6b 	bl	8001be4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800330e:	480d      	ldr	r0, [pc, #52]	@ (8003344 <prvInitialiseTaskLists+0x68>)
 8003310:	f7fe fc68 	bl	8001be4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003314:	480c      	ldr	r0, [pc, #48]	@ (8003348 <prvInitialiseTaskLists+0x6c>)
 8003316:	f7fe fc65 	bl	8001be4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800331a:	480c      	ldr	r0, [pc, #48]	@ (800334c <prvInitialiseTaskLists+0x70>)
 800331c:	f7fe fc62 	bl	8001be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003320:	480b      	ldr	r0, [pc, #44]	@ (8003350 <prvInitialiseTaskLists+0x74>)
 8003322:	f7fe fc5f 	bl	8001be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <prvInitialiseTaskLists+0x78>)
 8003328:	4a05      	ldr	r2, [pc, #20]	@ (8003340 <prvInitialiseTaskLists+0x64>)
 800332a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800332c:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <prvInitialiseTaskLists+0x7c>)
 800332e:	4a05      	ldr	r2, [pc, #20]	@ (8003344 <prvInitialiseTaskLists+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000384 	.word	0x20000384
 8003340:	20000410 	.word	0x20000410
 8003344:	20000424 	.word	0x20000424
 8003348:	20000440 	.word	0x20000440
 800334c:	20000454 	.word	0x20000454
 8003350:	2000046c 	.word	0x2000046c
 8003354:	20000438 	.word	0x20000438
 8003358:	2000043c 	.word	0x2000043c

0800335c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003362:	e019      	b.n	8003398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003364:	f000 fb92 	bl	8003a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <prvCheckTasksWaitingTermination+0x50>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fcbb 	bl	8001cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <prvCheckTasksWaitingTermination+0x54>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a0b      	ldr	r2, [pc, #44]	@ (80033b0 <prvCheckTasksWaitingTermination+0x54>)
 8003382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3b01      	subs	r3, #1
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 800338c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800338e:	f000 fbad 	bl	8003aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f810 	bl	80033b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <prvCheckTasksWaitingTermination+0x58>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e1      	bne.n	8003364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000454 	.word	0x20000454
 80033b0:	20000480 	.word	0x20000480
 80033b4:	20000468 	.word	0x20000468

080033b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	334c      	adds	r3, #76	@ 0x4c
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fe57 	bl	8004078 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fd27 	bl	8003e2c <vPortFree>
				vPortFree( pxTCB );
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fd24 	bl	8003e2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033e4:	e019      	b.n	800341a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d103      	bne.n	80033f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fd1b 	bl	8003e2c <vPortFree>
	}
 80033f6:	e010      	b.n	800341a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d00b      	beq.n	800341a <prvDeleteTCB+0x62>
	__asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	60fb      	str	r3, [r7, #12]
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	e7fd      	b.n	8003416 <prvDeleteTCB+0x5e>
	}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800342a:	4b0c      	ldr	r3, [pc, #48]	@ (800345c <prvResetNextTaskUnblockTime+0x38>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <prvResetNextTaskUnblockTime+0x3c>)
 8003436:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800343a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800343c:	e008      	b.n	8003450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <prvResetNextTaskUnblockTime+0x38>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <prvResetNextTaskUnblockTime+0x3c>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000438 	.word	0x20000438
 8003460:	200004a0 	.word	0x200004a0

08003464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <xTaskGetSchedulerState+0x34>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003472:	2301      	movs	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	e008      	b.n	800348a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003478:	4b08      	ldr	r3, [pc, #32]	@ (800349c <xTaskGetSchedulerState+0x38>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003480:	2302      	movs	r3, #2
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e001      	b.n	800348a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800348a:	687b      	ldr	r3, [r7, #4]
	}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	2000048c 	.word	0x2000048c
 800349c:	200004a8 	.word	0x200004a8

080034a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d05e      	beq.n	8003574 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	4b31      	ldr	r3, [pc, #196]	@ (8003580 <xTaskPriorityInherit+0xe0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d24e      	bcs.n	8003562 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db06      	blt.n	80034da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003580 <xTaskPriorityInherit+0xe0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	f1c3 0207 	rsb	r2, r3, #7
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <xTaskPriorityInherit+0xe4>)
 80034ec:	4413      	add	r3, r2
 80034ee:	4299      	cmp	r1, r3
 80034f0:	d12f      	bne.n	8003552 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fbfa 	bl	8001cf0 <uxListRemove>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43da      	mvns	r2, r3
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <xTaskPriorityInherit+0xe8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4013      	ands	r3, r2
 8003514:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <xTaskPriorityInherit+0xe8>)
 8003516:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <xTaskPriorityInherit+0xe0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <xTaskPriorityInherit+0xe8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <xTaskPriorityInherit+0xe8>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <xTaskPriorityInherit+0xe4>)
 8003542:	441a      	add	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7fe fb75 	bl	8001c3a <vListInsertEnd>
 8003550:	e004      	b.n	800355c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003552:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <xTaskPriorityInherit+0xe0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800355c:	2301      	movs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e008      	b.n	8003574 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <xTaskPriorityInherit+0xe0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	429a      	cmp	r2, r3
 800356e:	d201      	bcs.n	8003574 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003574:	68fb      	ldr	r3, [r7, #12]
	}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000380 	.word	0x20000380
 8003584:	20000384 	.word	0x20000384
 8003588:	20000488 	.word	0x20000488

0800358c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d070      	beq.n	8003684 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003690 <xTaskPriorityDisinherit+0x104>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d00b      	beq.n	80035c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	60bb      	str	r3, [r7, #8]
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d044      	beq.n	8003684 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d140      	bne.n	8003684 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fb72 	bl	8001cf0 <uxListRemove>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d115      	bne.n	800363e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003616:	491f      	ldr	r1, [pc, #124]	@ (8003694 <xTaskPriorityDisinherit+0x108>)
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xTaskPriorityDisinherit+0xb2>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <xTaskPriorityDisinherit+0x10c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4013      	ands	r3, r2
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <xTaskPriorityDisinherit+0x10c>)
 800363c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	f1c3 0207 	rsb	r2, r3, #7
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	2201      	movs	r2, #1
 8003658:	409a      	lsls	r2, r3
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <xTaskPriorityDisinherit+0x10c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	4a0d      	ldr	r2, [pc, #52]	@ (8003698 <xTaskPriorityDisinherit+0x10c>)
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4a08      	ldr	r2, [pc, #32]	@ (8003694 <xTaskPriorityDisinherit+0x108>)
 8003672:	441a      	add	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f7fe fadd 	bl	8001c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003684:	697b      	ldr	r3, [r7, #20]
	}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000380 	.word	0x20000380
 8003694:	20000384 	.word	0x20000384
 8003698:	20000488 	.word	0x20000488

0800369c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d079      	beq.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e002      	b.n	80036ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d059      	beq.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d154      	bne.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80036fe:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d10b      	bne.n	8003720 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	60bb      	str	r3, [r7, #8]
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db04      	blt.n	800373e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f1c3 0207 	rsb	r2, r3, #7
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6959      	ldr	r1, [r3, #20]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800374e:	4413      	add	r3, r2
 8003750:	4299      	cmp	r1, r3
 8003752:	d129      	bne.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	3304      	adds	r3, #4
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fac9 	bl	8001cf0 <uxListRemove>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4013      	ands	r3, r2
 8003776:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003778:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	2201      	movs	r2, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	4a0b      	ldr	r2, [pc, #44]	@ (80037b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4a06      	ldr	r2, [pc, #24]	@ (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800379a:	441a      	add	r2, r3
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fe fa49 	bl	8001c3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000380 	.word	0x20000380
 80037b4:	20000384 	.word	0x20000384
 80037b8:	20000488 	.word	0x20000488

080037bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037ce:	3201      	adds	r2, #1
 80037d0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80037d2:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037d4:	681b      	ldr	r3, [r3, #0]
	}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000380 	.word	0x20000380

080037e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037f4:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fa78 	bl	8001cf0 <uxListRemove>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003806:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	2201      	movs	r2, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	4b21      	ldr	r3, [pc, #132]	@ (800389c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4013      	ands	r3, r2
 800381a:	4a20      	ldr	r2, [pc, #128]	@ (800389c <prvAddCurrentTaskToDelayedList+0xb8>)
 800381c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003824:	d10a      	bne.n	800383c <prvAddCurrentTaskToDelayedList+0x58>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	481a      	ldr	r0, [pc, #104]	@ (80038a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003836:	f7fe fa00 	bl	8001c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800383a:	e026      	b.n	800388a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003844:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d209      	bcs.n	8003868 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7fe fa0d 	bl	8001c80 <vListInsert>
}
 8003866:	e010      	b.n	800388a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xb4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fe fa03 	bl	8001c80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800387a:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	d202      	bcs.n	800388a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003884:	4a09      	ldr	r2, [pc, #36]	@ (80038ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6013      	str	r3, [r2, #0]
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000484 	.word	0x20000484
 8003898:	20000380 	.word	0x20000380
 800389c:	20000488 	.word	0x20000488
 80038a0:	2000046c 	.word	0x2000046c
 80038a4:	2000043c 	.word	0x2000043c
 80038a8:	20000438 	.word	0x20000438
 80038ac:	200004a0 	.word	0x200004a0

080038b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3b04      	subs	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b04      	subs	r3, #4
 80038de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038e0:	4a08      	ldr	r2, [pc, #32]	@ (8003904 <pxPortInitialiseStack+0x54>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b14      	subs	r3, #20
 80038ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3b20      	subs	r3, #32
 80038f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038f8:	68fb      	ldr	r3, [r7, #12]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	08003909 	.word	0x08003909

08003908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <prvTaskExitError+0x54>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800391a:	d00b      	beq.n	8003934 <prvTaskExitError+0x2c>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <prvTaskExitError+0x28>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60bb      	str	r3, [r7, #8]
}
 8003946:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003948:	bf00      	nop
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0fc      	beq.n	800394a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000010 	.word	0x20000010

08003960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <pxCurrentTCBConst2>)
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	6808      	ldr	r0, [r1, #0]
 8003966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800396a:	f380 8809 	msr	PSP, r0
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f380 8811 	msr	BASEPRI, r0
 800397a:	f04e 0e0d 	orr.w	lr, lr, #13
 800397e:	4770      	bx	lr

08003980 <pxCurrentTCBConst2>:
 8003980:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop

08003988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003988:	4806      	ldr	r0, [pc, #24]	@ (80039a4 <prvPortStartFirstTask+0x1c>)
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	f380 8808 	msr	MSP, r0
 8003992:	b662      	cpsie	i
 8003994:	b661      	cpsie	f
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	df00      	svc	0
 80039a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039a2:	bf00      	nop
 80039a4:	e000ed08 	.word	0xe000ed08

080039a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ae:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <xPortStartScheduler+0xd0>)
 80039b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	22ff      	movs	r2, #255	@ 0xff
 80039be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <xPortStartScheduler+0xd4>)
 80039d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039dc:	e009      	b.n	80039f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039de:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <xPortStartScheduler+0xd8>)
 80039e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b80      	cmp	r3, #128	@ 0x80
 80039fc:	d0ef      	beq.n	80039de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d00b      	beq.n	8003a22 <xPortStartScheduler+0x7a>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60bb      	str	r3, [r7, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a22:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a2c:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <xPortStartScheduler+0xd8>)
 8003a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0f      	ldr	r2, [pc, #60]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0c      	ldr	r2, [pc, #48]	@ (8003a84 <xPortStartScheduler+0xdc>)
 8003a52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a58:	f000 f8b8 	bl	8003bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <xPortStartScheduler+0xe0>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a62:	f7ff ff91 	bl	8003988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a66:	f7ff faaf 	bl	8002fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8003a6a:	f7ff ff4d 	bl	8003908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000e400 	.word	0xe000e400
 8003a7c:	200004ac 	.word	0x200004ac
 8003a80:	200004b0 	.word	0x200004b0
 8003a84:	e000ed20 	.word	0xe000ed20
 8003a88:	20000010 	.word	0x20000010

08003a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	607b      	str	r3, [r7, #4]
}
 8003aa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003aae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <vPortEnterCritical+0x58>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d110      	bne.n	8003ada <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <vPortEnterCritical+0x5c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <vPortEnterCritical+0x4e>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	603b      	str	r3, [r7, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <vPortEnterCritical+0x4a>
	}
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	20000010 	.word	0x20000010
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <vPortExitCritical+0x50>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <vPortExitCritical+0x26>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b1c:	4b07      	ldr	r3, [pc, #28]	@ (8003b3c <vPortExitCritical+0x50>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <vPortExitCritical+0x44>
 8003b24:	2300      	movs	r3, #0
 8003b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
}
 8003b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000010 	.word	0x20000010

08003b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b40:	f3ef 8009 	mrs	r0, PSP
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <pxCurrentTCBConst>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b50:	6010      	str	r0, [r2, #0]
 8003b52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b5a:	f380 8811 	msr	BASEPRI, r0
 8003b5e:	f7ff fa33 	bl	8002fc8 <vTaskSwitchContext>
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8811 	msr	BASEPRI, r0
 8003b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6808      	ldr	r0, [r1, #0]
 8003b72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b76:	f380 8809 	msr	PSP, r0
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	4770      	bx	lr

08003b80 <pxCurrentTCBConst>:
 8003b80:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
}
 8003ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ba2:	f7ff f957 	bl	8002e54 <xTaskIncrementTick>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <SysTick_Handler+0x40>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f383 8811 	msr	BASEPRI, r3
}
 8003bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <vPortSetupTimerInterrupt+0x30>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <vPortSetupTimerInterrupt+0x34>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <vPortSetupTimerInterrupt+0x38>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a09      	ldr	r2, [pc, #36]	@ (8003c08 <vPortSetupTimerInterrupt+0x3c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <vPortSetupTimerInterrupt+0x40>)
 8003bea:	3b01      	subs	r3, #1
 8003bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bee:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <vPortSetupTimerInterrupt+0x30>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e010 	.word	0xe000e010
 8003c00:	e000e018 	.word	0xe000e018
 8003c04:	20000004 	.word	0x20000004
 8003c08:	10624dd3 	.word	0x10624dd3
 8003c0c:	e000e014 	.word	0xe000e014

08003c10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c16:	f3ef 8305 	mrs	r3, IPSR
 8003c1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d915      	bls.n	8003c4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c22:	4a17      	ldr	r2, [pc, #92]	@ (8003c80 <vPortValidateInterruptPriority+0x70>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c2c:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <vPortValidateInterruptPriority+0x74>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	7afa      	ldrb	r2, [r7, #11]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d20b      	bcs.n	8003c4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	607b      	str	r3, [r7, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <vPortValidateInterruptPriority+0x78>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <vPortValidateInterruptPriority+0x7c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90b      	bls.n	8003c76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	603b      	str	r3, [r7, #0]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vPortValidateInterruptPriority+0x62>
	}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	e000e3f0 	.word	0xe000e3f0
 8003c84:	200004ac 	.word	0x200004ac
 8003c88:	e000ed0c 	.word	0xe000ed0c
 8003c8c:	200004b0 	.word	0x200004b0

08003c90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c9c:	f7ff f82e 	bl	8002cfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <pvPortMalloc+0x184>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ca8:	f000 f924 	bl	8003ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cac:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <pvPortMalloc+0x188>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8095 	bne.w	8003de4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01e      	beq.n	8003cfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f023 0307 	bic.w	r3, r3, #7
 8003cd8:	3308      	adds	r3, #8
 8003cda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <pvPortMalloc+0x6e>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d06f      	beq.n	8003de4 <pvPortMalloc+0x154>
 8003d04:	4b45      	ldr	r3, [pc, #276]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d86a      	bhi.n	8003de4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d12:	4b43      	ldr	r3, [pc, #268]	@ (8003e20 <pvPortMalloc+0x190>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d18:	e004      	b.n	8003d24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <pvPortMalloc+0xa6>
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f1      	bne.n	8003d1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d36:	4b37      	ldr	r3, [pc, #220]	@ (8003e14 <pvPortMalloc+0x184>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d051      	beq.n	8003de4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4413      	add	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d920      	bls.n	8003da4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <pvPortMalloc+0xfc>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d9e:	69b8      	ldr	r0, [r7, #24]
 8003da0:	f000 f90a 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003db2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <pvPortMalloc+0x194>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d203      	bcs.n	8003dc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dbe:	4b17      	ldr	r3, [pc, #92]	@ (8003e1c <pvPortMalloc+0x18c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <pvPortMalloc+0x194>)
 8003dc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <pvPortMalloc+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <pvPortMalloc+0x198>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a11      	ldr	r2, [pc, #68]	@ (8003e28 <pvPortMalloc+0x198>)
 8003de2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003de4:	f7fe ff98 	bl	8002d18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <pvPortMalloc+0x17a>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60fb      	str	r3, [r7, #12]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <pvPortMalloc+0x176>
	return pvReturn;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	@ 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200010bc 	.word	0x200010bc
 8003e18:	200010d0 	.word	0x200010d0
 8003e1c:	200010c0 	.word	0x200010c0
 8003e20:	200010b4 	.word	0x200010b4
 8003e24:	200010c4 	.word	0x200010c4
 8003e28:	200010c8 	.word	0x200010c8

08003e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04f      	beq.n	8003ede <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e3e:	2308      	movs	r3, #8
 8003e40:	425b      	negs	r3, r3
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4413      	add	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <vPortFree+0xbc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <vPortFree+0x46>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60fb      	str	r3, [r7, #12]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <vPortFree+0x66>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <vPortFree+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11a      	bne.n	8003ede <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <vPortFree+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003eb8:	f7fe ff20 	bl	8002cfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <vPortFree+0xc0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <vPortFree+0xc0>)
 8003ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eca:	6938      	ldr	r0, [r7, #16]
 8003ecc:	f000 f874 	bl	8003fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a06      	ldr	r2, [pc, #24]	@ (8003ef0 <vPortFree+0xc4>)
 8003ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eda:	f7fe ff1d 	bl	8002d18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200010d0 	.word	0x200010d0
 8003eec:	200010c0 	.word	0x200010c0
 8003ef0:	200010cc 	.word	0x200010cc

08003ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003efa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f00:	4b27      	ldr	r3, [pc, #156]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3307      	adds	r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <prvHeapInit+0xac>)
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <prvHeapInit+0xb0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f40:	2208      	movs	r2, #8
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f5e:	4b12      	ldr	r3, [pc, #72]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <prvHeapInit+0xb4>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <prvHeapInit+0xb8>)
 8003f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <prvHeapInit+0xbc>)
 8003f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <prvHeapInit+0xc0>)
 8003f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	200004b4 	.word	0x200004b4
 8003fa4:	200010b4 	.word	0x200010b4
 8003fa8:	200010bc 	.word	0x200010bc
 8003fac:	200010c4 	.word	0x200010c4
 8003fb0:	200010c0 	.word	0x200010c0
 8003fb4:	200010d0 	.word	0x200010d0

08003fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fc0:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <prvInsertBlockIntoFreeList+0xa8>)
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <prvInsertBlockIntoFreeList+0x14>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d8f7      	bhi.n	8003fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d108      	bne.n	8003ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d118      	bne.n	8004040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d00d      	beq.n	8004036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e008      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvInsertBlockIntoFreeList+0xac>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e003      	b.n	8004048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d002      	beq.n	8004056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	200010b4 	.word	0x200010b4
 8004064:	200010bc 	.word	0x200010bc

08004068 <memset>:
 8004068:	4603      	mov	r3, r0
 800406a:	4402      	add	r2, r0
 800406c:	4293      	cmp	r3, r2
 800406e:	d100      	bne.n	8004072 <memset+0xa>
 8004070:	4770      	bx	lr
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7f9      	b.n	800406c <memset+0x4>

08004078 <_reclaim_reent>:
 8004078:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <_reclaim_reent+0xa8>)
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4604      	mov	r4, r0
 8004080:	4283      	cmp	r3, r0
 8004082:	d04b      	beq.n	800411c <_reclaim_reent+0xa4>
 8004084:	69c3      	ldr	r3, [r0, #28]
 8004086:	b1ab      	cbz	r3, 80040b4 <_reclaim_reent+0x3c>
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	b16b      	cbz	r3, 80040a8 <_reclaim_reent+0x30>
 800408c:	2500      	movs	r5, #0
 800408e:	69e3      	ldr	r3, [r4, #28]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	5959      	ldr	r1, [r3, r5]
 8004094:	2900      	cmp	r1, #0
 8004096:	d13b      	bne.n	8004110 <_reclaim_reent+0x98>
 8004098:	3504      	adds	r5, #4
 800409a:	2d80      	cmp	r5, #128	@ 0x80
 800409c:	d1f7      	bne.n	800408e <_reclaim_reent+0x16>
 800409e:	69e3      	ldr	r3, [r4, #28]
 80040a0:	4620      	mov	r0, r4
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	f000 f872 	bl	800418c <_free_r>
 80040a8:	69e3      	ldr	r3, [r4, #28]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	b111      	cbz	r1, 80040b4 <_reclaim_reent+0x3c>
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 f86c 	bl	800418c <_free_r>
 80040b4:	6961      	ldr	r1, [r4, #20]
 80040b6:	b111      	cbz	r1, 80040be <_reclaim_reent+0x46>
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 f867 	bl	800418c <_free_r>
 80040be:	69e1      	ldr	r1, [r4, #28]
 80040c0:	b111      	cbz	r1, 80040c8 <_reclaim_reent+0x50>
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 f862 	bl	800418c <_free_r>
 80040c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80040ca:	b111      	cbz	r1, 80040d2 <_reclaim_reent+0x5a>
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 f85d 	bl	800418c <_free_r>
 80040d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d4:	b111      	cbz	r1, 80040dc <_reclaim_reent+0x64>
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 f858 	bl	800418c <_free_r>
 80040dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80040de:	b111      	cbz	r1, 80040e6 <_reclaim_reent+0x6e>
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 f853 	bl	800418c <_free_r>
 80040e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80040e8:	b111      	cbz	r1, 80040f0 <_reclaim_reent+0x78>
 80040ea:	4620      	mov	r0, r4
 80040ec:	f000 f84e 	bl	800418c <_free_r>
 80040f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80040f2:	b111      	cbz	r1, 80040fa <_reclaim_reent+0x82>
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 f849 	bl	800418c <_free_r>
 80040fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040fc:	b111      	cbz	r1, 8004104 <_reclaim_reent+0x8c>
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 f844 	bl	800418c <_free_r>
 8004104:	6a23      	ldr	r3, [r4, #32]
 8004106:	b14b      	cbz	r3, 800411c <_reclaim_reent+0xa4>
 8004108:	4620      	mov	r0, r4
 800410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800410e:	4718      	bx	r3
 8004110:	680e      	ldr	r6, [r1, #0]
 8004112:	4620      	mov	r0, r4
 8004114:	f000 f83a 	bl	800418c <_free_r>
 8004118:	4631      	mov	r1, r6
 800411a:	e7bb      	b.n	8004094 <_reclaim_reent+0x1c>
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	bf00      	nop
 8004120:	20000014 	.word	0x20000014

08004124 <__libc_init_array>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	2600      	movs	r6, #0
 8004128:	4d0c      	ldr	r5, [pc, #48]	@ (800415c <__libc_init_array+0x38>)
 800412a:	4c0d      	ldr	r4, [pc, #52]	@ (8004160 <__libc_init_array+0x3c>)
 800412c:	1b64      	subs	r4, r4, r5
 800412e:	10a4      	asrs	r4, r4, #2
 8004130:	42a6      	cmp	r6, r4
 8004132:	d109      	bne.n	8004148 <__libc_init_array+0x24>
 8004134:	f000 f87e 	bl	8004234 <_init>
 8004138:	2600      	movs	r6, #0
 800413a:	4d0a      	ldr	r5, [pc, #40]	@ (8004164 <__libc_init_array+0x40>)
 800413c:	4c0a      	ldr	r4, [pc, #40]	@ (8004168 <__libc_init_array+0x44>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	42a6      	cmp	r6, r4
 8004144:	d105      	bne.n	8004152 <__libc_init_array+0x2e>
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	f855 3b04 	ldr.w	r3, [r5], #4
 800414c:	4798      	blx	r3
 800414e:	3601      	adds	r6, #1
 8004150:	e7ee      	b.n	8004130 <__libc_init_array+0xc>
 8004152:	f855 3b04 	ldr.w	r3, [r5], #4
 8004156:	4798      	blx	r3
 8004158:	3601      	adds	r6, #1
 800415a:	e7f2      	b.n	8004142 <__libc_init_array+0x1e>
 800415c:	08004328 	.word	0x08004328
 8004160:	08004328 	.word	0x08004328
 8004164:	08004328 	.word	0x08004328
 8004168:	0800432c 	.word	0x0800432c

0800416c <__retarget_lock_acquire_recursive>:
 800416c:	4770      	bx	lr

0800416e <__retarget_lock_release_recursive>:
 800416e:	4770      	bx	lr

08004170 <memcpy>:
 8004170:	440a      	add	r2, r1
 8004172:	4291      	cmp	r1, r2
 8004174:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004178:	d100      	bne.n	800417c <memcpy+0xc>
 800417a:	4770      	bx	lr
 800417c:	b510      	push	{r4, lr}
 800417e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004182:	4291      	cmp	r1, r2
 8004184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004188:	d1f9      	bne.n	800417e <memcpy+0xe>
 800418a:	bd10      	pop	{r4, pc}

0800418c <_free_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4605      	mov	r5, r0
 8004190:	2900      	cmp	r1, #0
 8004192:	d040      	beq.n	8004216 <_free_r+0x8a>
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	18e4      	addlt	r4, r4, r3
 80041a0:	f000 f83c 	bl	800421c <__malloc_lock>
 80041a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <_free_r+0x8c>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	b933      	cbnz	r3, 80041b8 <_free_r+0x2c>
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	6014      	str	r4, [r2, #0]
 80041ae:	4628      	mov	r0, r5
 80041b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b4:	f000 b838 	b.w	8004228 <__malloc_unlock>
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	d908      	bls.n	80041ce <_free_r+0x42>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	1821      	adds	r1, r4, r0
 80041c0:	428b      	cmp	r3, r1
 80041c2:	bf01      	itttt	eq
 80041c4:	6819      	ldreq	r1, [r3, #0]
 80041c6:	685b      	ldreq	r3, [r3, #4]
 80041c8:	1809      	addeq	r1, r1, r0
 80041ca:	6021      	streq	r1, [r4, #0]
 80041cc:	e7ed      	b.n	80041aa <_free_r+0x1e>
 80041ce:	461a      	mov	r2, r3
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	b10b      	cbz	r3, 80041d8 <_free_r+0x4c>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d9fa      	bls.n	80041ce <_free_r+0x42>
 80041d8:	6811      	ldr	r1, [r2, #0]
 80041da:	1850      	adds	r0, r2, r1
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d10b      	bne.n	80041f8 <_free_r+0x6c>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	4401      	add	r1, r0
 80041e4:	1850      	adds	r0, r2, r1
 80041e6:	4283      	cmp	r3, r0
 80041e8:	6011      	str	r1, [r2, #0]
 80041ea:	d1e0      	bne.n	80041ae <_free_r+0x22>
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4408      	add	r0, r1
 80041f2:	6010      	str	r0, [r2, #0]
 80041f4:	6053      	str	r3, [r2, #4]
 80041f6:	e7da      	b.n	80041ae <_free_r+0x22>
 80041f8:	d902      	bls.n	8004200 <_free_r+0x74>
 80041fa:	230c      	movs	r3, #12
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	e7d6      	b.n	80041ae <_free_r+0x22>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	1821      	adds	r1, r4, r0
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1809      	addeq	r1, r1, r0
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	6063      	str	r3, [r4, #4]
 8004212:	6054      	str	r4, [r2, #4]
 8004214:	e7cb      	b.n	80041ae <_free_r+0x22>
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	20001210 	.word	0x20001210

0800421c <__malloc_lock>:
 800421c:	4801      	ldr	r0, [pc, #4]	@ (8004224 <__malloc_lock+0x8>)
 800421e:	f7ff bfa5 	b.w	800416c <__retarget_lock_acquire_recursive>
 8004222:	bf00      	nop
 8004224:	2000120c 	.word	0x2000120c

08004228 <__malloc_unlock>:
 8004228:	4801      	ldr	r0, [pc, #4]	@ (8004230 <__malloc_unlock+0x8>)
 800422a:	f7ff bfa0 	b.w	800416e <__retarget_lock_release_recursive>
 800422e:	bf00      	nop
 8004230:	2000120c 	.word	0x2000120c

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
